#initially all frequencies in mat are 0
for (i in 1:4){
for (j in 1:12){
mat[[i]][[j]][,2]=mat[[i]][[j]][,2]-mat[[i]][[j]][,2]
}
}
#calculate the weighted frequencies and record them in mat
for (k in 1:9){
train_freq <- list()
for (i in 1:4){
train_sub <- subset(train,Population == popul[i])
train_subc <- list()
for (j in 1:locus){
train_subc[[j]]= compute_counts(train_sub,j)+al[k]
}
train_subf <- lapply(train_subc,normalize)
train_subf <- lapply(train_subf,data.frame)
train_freq[[i]] <- train_subf
}
for (i in 1:4){
for (j in 1:12){
mat[[i]][[j]][,2]=mat[[i]][[j]][,2]+w[[(i-1)*12+j]][k]*train_freq[[i]][[j]][,2]
}
}
}
#compute posterior probabilities for each individual in the test set
#using weighted frequencies
val=matrix(0,nrow=nrow(test),ncol=4)
for (i in 1:nrow(test)){
val[i,]=fun2(test[i,],mat)
}
ls=c()
for (i in 1:nrow(test)){
if(max(val[i,])>0){
j=which.max(val[i,])
if (j==1){
ls=c(ls,"EelR")
}
else if(j==2){
ls=c(ls,"FeatherHfa")
}
else if(j==3){
ls=c(ls,"FeatherHsp")
}
else if(j==4){
ls=c(ls,"KlamathRfa")
}
}
else {ls=c(ls,"NA")}
}
summary(as.factor(ls))
#number of individuals with non-zero posterior probabilities
c=(ls!="NA")
#number of indivuduals that are correctly assigned
sum(ls[c]==test[c,2])
#error rate among non "NA" set
(length(ls[c])-sum(ls[c]==test[c,2]))/length(ls[c])
orig_data = read.table("../../../stat302/data/seeb/four_salmon_pops.csv",
header=TRUE,colClasses="character",sep=",")
set.seed(100) #to ensure reproducibility
#Convert the data at each locus to a factor
#Note that we have to be careful to include all the levels from *both* columns
#for each locus
mylevels= function(locus){levels(factor(c(orig_data[,(1+2*locus)],
orig_data[,(2+2*locus)])))}
#now set up four_salmon_pops
four_salmon_pops = orig_data
for(locus in 1:12){
four_salmon_pops[,1+2*locus]= factor(four_salmon_pops[,1+2*locus],levels = mylevels(locus))
four_salmon_pops[,2+2*locus]= factor(four_salmon_pops[,2+2*locus],levels = mylevels(locus))
}
#Randomly divide the data into a training set and a test set
nsamp = nrow(four_salmon_pops)
subset = (rbinom(nsamp,1,0.5)==1) #include each fish in subset with probability 0.5
train = four_salmon_pops[subset,]
test = four_salmon_pops[!subset,]
#this function computes a table of the alleles and their counts at a given locus (locus= 1...12)
#in a given data frame (data)
compute_counts = function(data,locus){
return(table(data[,1+2*locus]) + table(data[,2+2*locus]))
}
#Here's an example of how this can be used
#to compute the allele frequencies (both the counts and the proportions) in the training set
trainc = list()
for(i in 1:locus){trainc[[i]]= compute_counts(train,i)}
normalize= function(x){x/sum(x)}
trainf = lapply(trainc,normalize) #compute the proportions, or relative frequencies, from counts
trainf
## estimates true frequencies from training data with dirichlet prior
compute.frequencies <- function(data,locus,alpha) {
return(normalize(table(data[,1+2*locus]) + table(data[,2+2*locus]) + alpha))
}
## estimate sub-population frequencies from training data at each locus with dirichlet prior
population.freq <- function(train, alpha) {
num.locus       <- 12
## frequency for each (population, locus) pair
pop.freq        <- vector("list", length(unique(train$Population)))
names(pop.freq) <- unique(train$Population)
for(sub.pop in names(pop.freq)) {
pop.freq[[sub.pop]] <- vector("list", num.locus)
for(locus in seq_len(num.locus)) {
pop.freq[[sub.pop]][[locus]] <- compute.frequencies(subset(train, Population == sub.pop),
locus, alpha=alpha)
}
}
return(pop.freq)
}
## compute likelihood for sub-population
compute.likelihood <- function(data, pop, pop.freq) {
## initialize likelihood to 1
likelihood  <- 1
## assuming each locus contributes independently, take the product
## of previously computed frequencies across loci to obtain likelihood
for(locus in 1:12) {
allele.1 <- as.character(data[,1+2*locus])
if(!is.na(allele.1))
likelihood <- likelihood*pop.freq[[pop]][[locus]][allele.1]
allele.2 <- as.character(data[,2+2*locus])
if(!is.na(allele.2))
likelihood <- likelihood*pop.freq[[pop]][[locus]][allele.2]
}
return(likelihood)
}
compute.posterior <- function(data, pop, all.pop, pop.freq) {
## uniform prior across populations
prior                <- 1/4
likelihood           <- compute.likelihood(data, pop, pop.freq)
normalizing.constant <- sum(sapply(all.pop, function(p) compute.likelihood(data,p, pop.freq))*prior)
return(likelihood*prior/normalizing.constant)
}
individual.posteriors <- function(test,pop.freq) {
indiv.postr           <- data.frame(matrix(nrow=nrow(test), ncol=length(unique(test$Population))+2))
colnames(indiv.postr) <- c('Individual', 'Population', unique(test$Population))
for(r in seq_len(nrow(test))) {
indiv.postr$Individual[r] <- test$Individual[r]
indiv.postr$Population[r] <- test$Population[r]
for(sub.pop in unique(test$Population)) {
indiv.postr[r,sub.pop]     <- compute.posterior(test[r,], sub.pop,
unique(test$Population), pop.freq)
}
}
return(indiv.postr)
}
compute.error <- function(indiv.postr) {
indiv.postr$predicted.population <- names(sapply(1:nrow(indiv.postr),
function(r) which.max(indiv.postr[r,3:6])))
return(1-mean(indiv.postr$Population == indiv.postr$predicted.population))
}
### Problem 5 (b)
alphas <- c(1e-3, 0.5, 1, 1e3)
errors <- sapply(alphas, function(a) compute.error(individual.posteriors(test, population.freq(train, alpha=a))))
### Problem 5 (c)
## compute raw counts with dirichlet prior
compute.counts <- function(data, locus, alpha) {
return(table(data[,1+2*locus]) + table(data[,2+2*locus]) + alpha)
}
population.count <- function(train, alpha) {
num.locus  <- 12
pop.counts        <-  vector("list", length(unique(train$Population)))
names(pop.counts) <- unique(train$Population)
for(sub.pop in names(pop.counts)) {
pop.counts[[sub.pop]] <- vector("list", num.locus)
for(locus in seq_len(num.locus)) {
pop.counts[[sub.pop]][[locus]] <- compute.counts(subset(train, Population == sub.pop),
locus, alpha=alpha)
}
}
return(pop.counts)
}
pop.counts <- population.count(train, 0)
computePopLocLikelihood <- function(counts, alpha) {
k <- length(counts)
X <- sum(lgamma(counts+alpha))
Z <- (k*lgamma(alpha))
return(X + lgamma(k*alpha) -Z - lgamma(k*alpha+sum(counts)))
}
## compute log(P(Training Data | alpha))
likelihood <- function(alpha) {
result <- 1
for( p in names(pop.counts) ) {
for( n in 1:12 ) {
result <- result + computePopLocLikelihood(pop.counts[[p]][[n]], alpha)
}
}
return(result)
}
optimize(likelihood, interval=c(0, 10), maximum=TRUE)
## Problem 5(e)
## update population counts given a new sample from the test set
updatePopCounts <- function(pop.counts, test.data, sub.pop) {
for(locus in 1:12) {
pop.counts[[sub.pop]][[locus]] <- pop.counts[[sub.pop]][[locus]] + compute.counts(test.data, locus, prior.count=0)
}
return(pop.counts)
}
likelihood <- function(alpha, counts) {
result <- 1
for( p in names(counts) ) {
for( n in 1:num.locus ) {
result <- result + computePopLocLikelihood(counts[[p]][[n]], alpha)
}
}
return(result)
}
output.names       <- c('Population', 'EelR', 'FeatherHfa', 'FeatherHsp', 'KlamathRfa')
results            <- data.frame(matrix(NA, nrow=nrow(test), ncol=length(output.names)))
colnames(results)  <- output.names
results$Population <- test$Population
alphas             <- c(0.025, 0.05, 0.1, 0.2, 0.4, 0.8, 1.6, 3.2, 6.3)
sub.pops           <- unique(train$Population)
## compute factor1 for all individuals and alphas at once
postrs           <-  vector("list", length(alphas))
names(postrs)    <- alphas
for( a in seq_along(alphas)) {
postrs[[a]] <- individual.posteriors(test, population.freq(train, alpha=a))
}
for( indiv in 1:nrow(test) ) {
print(indiv)
for(subPopulation in sub.pops) {
## for each individual, result = sum_alpha factor1[alpha] *(sum_pop factor2[alpha,pop] )
test.data         <- test[indiv, ]
factor1           <- numeric(length(alphas))
factor2           <- data.frame(matrix(0, nrow=length(sub.pops), ncol=length(alphas)))
rownames(factor2) <- sub.pops
## compute all the factors
for( a in seq_along(alphas) ) {
for( p in seq_along(sub.pops) ) {
newPopCounts            <- updatePopCounts(pop.counts, test.data, sub.pops[p])
factor2[sub.pops[p], a] <- likelihood(alphas[a], newPopCounts)
factor2[sub.pops[p], a] <- exp(factor2[sub.pops[p], a]-max(factor2[sub.pops[p], a]))
}
}
final.postr <- 0
## now compute the result
for( a in seq_along(alphas) ) {
sumLikelihoods <- 0
for( p in seq_along(sub.pops) ) {
sumLikelihoods <- factor2[sub.pops[p], a] + sumLikelihoods
}
final.postr <- final.postr + sumLikelihoods*postrs[[a]][indiv,subPopulation]
}
results[indiv, subPopulation] <- final.postr
}
}
## estimates true frequencies from training data with dirichlet prior
compute.frequencies <- function(data,locus,alpha) {
return(normalize(table(data[,1+2*locus]) + table(data[,2+2*locus]) + alpha))
}
## estimate sub-population frequencies from training data at each locus with dirichlet prior
population.freq <- function(train, alpha) {
num.locus       <- 12
## frequency for each (population, locus) pair
pop.freq        <- vector("list", length(unique(train$Population)))
names(pop.freq) <- unique(train$Population)
for(sub.pop in names(pop.freq)) {
pop.freq[[sub.pop]] <- vector("list", num.locus)
for(locus in seq_len(num.locus)) {
pop.freq[[sub.pop]][[locus]] <- compute.frequencies(subset(train, Population == sub.pop),
locus, alpha=alpha)
}
}
return(pop.freq)
}
## compute likelihood for sub-population
compute.likelihood <- function(data, pop, pop.freq) {
## initialize likelihood to 1
likelihood  <- 1
## assuming each locus contributes independently, take the product
## of previously computed frequencies across loci to obtain likelihood
for(locus in 1:12) {
allele.1 <- as.character(data[,1+2*locus])
if(!is.na(allele.1))
likelihood <- likelihood*pop.freq[[pop]][[locus]][allele.1]
allele.2 <- as.character(data[,2+2*locus])
if(!is.na(allele.2))
likelihood <- likelihood*pop.freq[[pop]][[locus]][allele.2]
}
return(likelihood)
}
compute.posterior <- function(data, pop, all.pop, pop.freq) {
## uniform prior across populations
prior                <- 1/4
likelihood           <- compute.likelihood(data, pop, pop.freq)
normalizing.constant <- sum(sapply(all.pop, function(p) compute.likelihood(data,p, pop.freq))*prior)
return(likelihood*prior/normalizing.constant)
}
individual.posteriors <- function(test,pop.freq) {
indiv.postr           <- data.frame(matrix(nrow=nrow(test), ncol=length(unique(test$Population))+2))
colnames(indiv.postr) <- c('Individual', 'Population', unique(test$Population))
for(r in seq_len(nrow(test))) {
indiv.postr$Individual[r] <- test$Individual[r]
indiv.postr$Population[r] <- test$Population[r]
for(sub.pop in unique(test$Population)) {
indiv.postr[r,sub.pop]     <- compute.posterior(test[r,], sub.pop,
unique(test$Population), pop.freq)
}
}
return(indiv.postr)
}
compute.error <- function(indiv.postr) {
indiv.postr$predicted.population <- names(sapply(1:nrow(indiv.postr),
function(r) which.max(indiv.postr[r,3:6])))
return(1-mean(indiv.postr$Population == indiv.postr$predicted.population))
}
### Problem 5 (b)
alphas <- c(1e-3, 0.5, 1, 1e3)
errors <- sapply(alphas, function(a) compute.error(individual.posteriors(test, population.freq(train, alpha=a))))
### Problem 5 (c)
## compute raw counts with dirichlet prior
compute.counts <- function(data, locus, alpha) {
return(table(data[,1+2*locus]) + table(data[,2+2*locus]) + alpha)
}
population.count <- function(train, alpha) {
num.locus  <- 12
pop.counts        <-  vector("list", length(unique(train$Population)))
names(pop.counts) <- unique(train$Population)
for(sub.pop in names(pop.counts)) {
pop.counts[[sub.pop]] <- vector("list", num.locus)
for(locus in seq_len(num.locus)) {
pop.counts[[sub.pop]][[locus]] <- compute.counts(subset(train, Population == sub.pop),
locus, alpha=alpha)
}
}
return(pop.counts)
}
pop.counts <- population.count(train, 0)
computePopLocLikelihood <- function(counts, alpha) {
k <- length(counts)
X <- sum(lgamma(counts+alpha))
Z <- (k*lgamma(alpha))
return(X + lgamma(k*alpha) -Z - lgamma(k*alpha+sum(counts)))
}
## compute log(P(Training Data | alpha))
likelihood <- function(alpha) {
result <- 1
for( p in names(pop.counts) ) {
for( n in 1:12 ) {
result <- result + computePopLocLikelihood(pop.counts[[p]][[n]], alpha)
}
}
return(result)
}
optimize(likelihood, interval=c(0, 10), maximum=TRUE)
## Problem 5(e)
## update population counts given a new sample from the test set
updatePopCounts <- function(pop.counts, test.data, sub.pop) {
for(locus in 1:12) {
pop.counts[[sub.pop]][[locus]] <- pop.counts[[sub.pop]][[locus]] + compute.counts(test.data, locus, alpha=0)
}
return(pop.counts)
}
likelihood <- function(alpha, counts) {
result <- 1
for( p in names(counts) ) {
for( n in 1:num.locus ) {
result <- result + computePopLocLikelihood(counts[[p]][[n]], alpha)
}
}
return(result)
}
output.names       <- c('Population', 'EelR', 'FeatherHfa', 'FeatherHsp', 'KlamathRfa')
results            <- data.frame(matrix(NA, nrow=nrow(test), ncol=length(output.names)))
colnames(results)  <- output.names
results$Population <- test$Population
alphas             <- c(0.025, 0.05, 0.1, 0.2, 0.4, 0.8, 1.6, 3.2, 6.3)
sub.pops           <- unique(train$Population)
## compute factor1 for all individuals and alphas at once
postrs           <-  vector("list", length(alphas))
names(postrs)    <- alphas
for( a in seq_along(alphas)) {
postrs[[a]] <- individual.posteriors(test, population.freq(train, alpha=a))
}
for( indiv in 1:nrow(test) ) {
print(indiv)
for(subPopulation in sub.pops) {
## for each individual, result = sum_alpha factor1[alpha] *(sum_pop factor2[alpha,pop] )
test.data         <- test[indiv, ]
factor1           <- numeric(length(alphas))
factor2           <- data.frame(matrix(0, nrow=length(sub.pops), ncol=length(alphas)))
rownames(factor2) <- sub.pops
## compute all the factors
for( a in seq_along(alphas) ) {
for( p in seq_along(sub.pops) ) {
newPopCounts            <- updatePopCounts(pop.counts, test.data, sub.pops[p])
factor2[sub.pops[p], a] <- likelihood(alphas[a], newPopCounts)
factor2[sub.pops[p], a] <- exp(factor2[sub.pops[p], a]-max(factor2[sub.pops[p], a]))
}
}
final.postr <- 0
## now compute the result
for( a in seq_along(alphas) ) {
sumLikelihoods <- 0
for( p in seq_along(sub.pops) ) {
sumLikelihoods <- factor2[sub.pops[p], a] + sumLikelihoods
}
final.postr <- final.postr + sumLikelihoods*postrs[[a]][indiv,subPopulation]
}
results[indiv, subPopulation] <- final.postr
}
}
## update population counts given a new sample from the test set
updatePopCounts <- function(pop.counts, test.data, sub.pop) {
for(locus in 1:12) {
pop.counts[[sub.pop]][[locus]] <- pop.counts[[sub.pop]][[locus]] + compute.counts(test.data, locus, alpha=0)
}
return(pop.counts)
}
likelihood <- function(alpha, counts) {
result <- 1
for( p in names(counts) ) {
for( n in 1:length(counts([[p]])) ) {
result <- result + computePopLocLikelihood(counts[[p]][[n]], alpha)
}
}
return(result)
}
output.names       <- c('Population', 'EelR', 'FeatherHfa', 'FeatherHsp', 'KlamathRfa')
results            <- data.frame(matrix(NA, nrow=nrow(test), ncol=length(output.names)))
colnames(results)  <- output.names
results$Population <- test$Population
alphas             <- c(0.025, 0.05, 0.1, 0.2, 0.4, 0.8, 1.6, 3.2, 6.3)
sub.pops           <- unique(train$Population)
## compute factor1 for all individuals and alphas at once
postrs           <-  vector("list", length(alphas))
names(postrs)    <- alphas
for( a in seq_along(alphas)) {
postrs[[a]] <- individual.posteriors(test, population.freq(train, alpha=a))
}
for( indiv in 1:nrow(test) ) {
print(indiv)
for(subPopulation in sub.pops) {
## for each individual, result = sum_alpha factor1[alpha] *(sum_pop factor2[alpha,pop] )
test.data         <- test[indiv, ]
factor1           <- numeric(length(alphas))
factor2           <- data.frame(matrix(0, nrow=length(sub.pops), ncol=length(alphas)))
rownames(factor2) <- sub.pops
## compute all the factors
for( a in seq_along(alphas) ) {
for( p in seq_along(sub.pops) ) {
newPopCounts            <- updatePopCounts(pop.counts, test.data, sub.pops[p])
factor2[sub.pops[p], a] <- likelihood(alphas[a], newPopCounts)
factor2[sub.pops[p], a] <- exp(factor2[sub.pops[p], a]-max(factor2[sub.pops[p], a]))
}
}
final.postr <- 0
## now compute the result
for( a in seq_along(alphas) ) {
sumLikelihoods <- 0
for( p in seq_along(sub.pops) ) {
sumLikelihoods <- factor2[sub.pops[p], a] + sumLikelihoods
}
final.postr <- final.postr + sumLikelihoods*postrs[[a]][indiv,subPopulation]
}
results[indiv, subPopulation] <- final.postr
}
}
## update population counts given a new sample from the test set
updatePopCounts <- function(pop.counts, test.data, sub.pop) {
for(locus in 1:12) {
pop.counts[[sub.pop]][[locus]] <- pop.counts[[sub.pop]][[locus]] + compute.counts(test.data, locus, alpha=0)
}
return(pop.counts)
}
likelihood <- function(alpha, counts) {
result <- 1
for( p in names(counts) ) {
for( n in 1:length(counts[[p]]) ) {
result <- result + computePopLocLikelihood(counts[[p]][[n]], alpha)
}
}
return(result)
}
output.names       <- c('Population', 'EelR', 'FeatherHfa', 'FeatherHsp', 'KlamathRfa')
results            <- data.frame(matrix(NA, nrow=nrow(test), ncol=length(output.names)))
colnames(results)  <- output.names
results$Population <- test$Population
alphas             <- c(0.025, 0.05, 0.1, 0.2, 0.4, 0.8, 1.6, 3.2, 6.3)
sub.pops           <- unique(train$Population)
## compute factor1 for all individuals and alphas at once
postrs           <-  vector("list", length(alphas))
names(postrs)    <- alphas
for( a in seq_along(alphas)) {
postrs[[a]] <- individual.posteriors(test, population.freq(train, alpha=a))
}
for( indiv in 1:nrow(test) ) {
print(indiv)
for(subPopulation in sub.pops) {
## for each individual, result = sum_alpha factor1[alpha] *(sum_pop factor2[alpha,pop] )
test.data         <- test[indiv, ]
factor1           <- numeric(length(alphas))
factor2           <- data.frame(matrix(0, nrow=length(sub.pops), ncol=length(alphas)))
rownames(factor2) <- sub.pops
## compute all the factors
for( a in seq_along(alphas) ) {
for( p in seq_along(sub.pops) ) {
newPopCounts            <- updatePopCounts(pop.counts, test.data, sub.pops[p])
factor2[sub.pops[p], a] <- likelihood(alphas[a], newPopCounts)
factor2[sub.pops[p], a] <- exp(factor2[sub.pops[p], a]-max(factor2[sub.pops[p], a]))
}
}
final.postr <- 0
## now compute the result
for( a in seq_along(alphas) ) {
sumLikelihoods <- 0
for( p in seq_along(sub.pops) ) {
sumLikelihoods <- factor2[sub.pops[p], a] + sumLikelihoods
}
final.postr <- final.postr + sumLikelihoods*postrs[[a]][indiv,subPopulation]
}
results[indiv, subPopulation] <- final.postr
}
}
